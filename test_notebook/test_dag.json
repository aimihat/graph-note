{
  "root": {
    "uid": "cell_root",
    "code": "import matplotlib.pyplot as plt\n# Import datasets, classifiers and performance metrics\nfrom sklearn import datasets, metrics, svm\nfrom sklearn.model_selection import train_test_split\n"
  },
  "cells": [
    {
      "uid": "cell_data",
      "code": "digits = datasets.load_digits()\n\ngraphnote.out({\"digits__different_name\": digits})\n",
      "outPorts": [
        {
          "uid": "1",
          "name": "digits__different_name"
        }
      ]
    },
    {
      "uid": "cell_trainer",
      "code": "# flatten the images\nn_samples = len(INPUT[\"digits\"].images)\ndata = digits.images.reshape((n_samples, -1))\n\n# Create a classifier: a support vector classifier\nclf = svm.SVC(gamma=0.001)\n\n# Split data into 50% train and 50% test subsets\nX_train, X_test, y_train, y_test = train_test_split(\n    data, digits.target, test_size=0.5, shuffle=False\n)\n\n# Learn the digits on the train subset\nclf.fit(X_train, y_train)\n\n# Predict the value of the digit on the test subset\npredicted = clf.predict(X_test)\n\ngraphnote.out(\n    {\n        \"predicted\": predicted,\n        \"clf\": clf,\n        \"X_test\": X_test,\n        \"y_test\": y_test,\n    }\n)\n",
      "inPorts": [
        {
          "uid": "2",
          "name": "digits"
        }
      ],
      "outPorts": [
        {
          "uid": "3",
          "name": "X_test"
        },
        {
          "uid": "4",
          "name": "predicted"
        },
        {
          "uid": "5",
          "name": "y_test"
        },
        {
          "uid": "6",
          "name": "clf"
        }
      ],
      "output": "This is the output for the trainer cell."
    },
    {
      "uid": "cell_visualize",
      "code": "# Below we visualize the first 4 test samples and show their predicted digit value in the title.\n\n_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\nfor ax, image, prediction in zip(axes, INPUT[\"X_test\"], INPUT[\"predicted\"]):\n    ax.set_axis_off()\n    image = image.reshape(8, 8)\n    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n    ax.set_title(f\"Prediction: {prediction}\")\n\nprint(\n    f'Classification report for classifier {INPUT[\"clf\"]}:\\n'\n    f'{metrics.classification_report(INPUT[\"y_test\"], INPUT[\"predicted\"])}\\n'\n)\n",
      "inPorts": [
        {
          "uid": "7",
          "name": "X_test"
        },
        {
          "uid": "8",
          "name": "predicted"
        },
        {
          "uid": "9",
          "name": "y_test"
        },
        {
          "uid": "10",
          "name": "clf"
        }
      ]
    }
  ],
  "connections": [
    {
      "fromPort": {
        "uid": "1",
        "name": "digits__different_name"
      },
      "toPort": {
        "uid": "2",
        "name": "digits"
      }
    },
    {
      "fromPort": {
        "uid": "3",
        "name": "X_test"
      },
      "toPort": {
        "uid": "7",
        "name": "X_test"
      }
    },
    {
      "fromPort": {
        "uid": "4",
        "name": "predicted"
      },
      "toPort": {
        "uid": "8",
        "name": "predicted"
      }
    },
    {
      "fromPort": {
        "uid": "5",
        "name": "y_test"
      },
      "toPort": {
        "uid": "9",
        "name": "y_test"
      }
    },
    {
      "fromPort": {
        "uid": "6",
        "name": "clf"
      },
      "toPort": {
        "uid": "10",
        "name": "clf"
      }
    }
  ]
}