"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Port(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    UID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LAST_UPDATED_FIELD_NUMBER: builtins.int
    uid: typing.Text
    """port unique identifier"""

    name: typing.Text
    """port name, only used for UI display"""

    last_updated: builtins.int
    """utc timestamp for the last time the port received an updated value"""

    def __init__(
        self,
        *,
        uid: typing.Text = ...,
        name: typing.Text = ...,
        last_updated: typing.Optional[builtins.int] = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_last_updated", b"_last_updated", "last_updated", b"last_updated"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_last_updated",
            b"_last_updated",
            "last_updated",
            b"last_updated",
            "name",
            b"name",
            "uid",
            b"uid",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_last_updated", b"_last_updated"]
    ) -> typing.Optional[typing_extensions.Literal["last_updated"]]: ...

global___Port = Port

class Connection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_UID_FIELD_NUMBER: builtins.int
    TARGET_UID_FIELD_NUMBER: builtins.int
    source_uid: typing.Text
    """uid of source port"""

    target_uid: typing.Text
    """uid of target port"""

    def __init__(
        self,
        *,
        source_uid: typing.Text = ...,
        target_uid: typing.Text = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "source_uid", b"source_uid", "target_uid", b"target_uid"
        ],
    ) -> None: ...

global___Connection = Connection

class Cell(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _DependencyStatus:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _DependencyStatusEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
            Cell._DependencyStatus.ValueType
        ],
        builtins.type,
    ):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        NOT_EXECUTED: Cell._DependencyStatus.ValueType  # 0
        INPUT_PORT_OUTDATED: Cell._DependencyStatus.ValueType  # 1
        UP_TO_DATE: Cell._DependencyStatus.ValueType  # 2

    class DependencyStatus(
        _DependencyStatus, metaclass=_DependencyStatusEnumTypeWrapper
    ):
        """this status code is used to colour code cells"""

        pass
    NOT_EXECUTED: Cell.DependencyStatus.ValueType  # 0
    INPUT_PORT_OUTDATED: Cell.DependencyStatus.ValueType  # 1
    UP_TO_DATE: Cell.DependencyStatus.ValueType  # 2

    UID_FIELD_NUMBER: builtins.int
    CODE_FIELD_NUMBER: builtins.int
    IN_PORTS_FIELD_NUMBER: builtins.int
    OUT_PORTS_FIELD_NUMBER: builtins.int
    OUTPUT_FIELD_NUMBER: builtins.int
    LAST_EXECUTED_FIELD_NUMBER: builtins.int
    DEPENDENCY_STATUS_FIELD_NUMBER: builtins.int
    uid: typing.Text
    """cell unique identifier"""

    code: typing.Text
    """raw code from the cell"""

    @property
    def in_ports(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Port
    ]:
        """cell inputs, updated whenever a cell is saved"""
        pass
    @property
    def out_ports(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Port
    ]:
        """cell outputs, updated whenever a cell is executed"""
        pass
    output: typing.Text
    """cell output text, displayed in the UI"""

    last_executed: builtins.int
    """utc timestamp for the last time the cell was successfully executed (successfully or not).
    @future: last_execution_status; (success / failure)
    """

    dependency_status: global___Cell.DependencyStatus.ValueType
    def __init__(
        self,
        *,
        uid: typing.Text = ...,
        code: typing.Text = ...,
        in_ports: typing.Optional[typing.Iterable[global___Port]] = ...,
        out_ports: typing.Optional[typing.Iterable[global___Port]] = ...,
        output: typing.Optional[typing.Text] = ...,
        last_executed: typing.Optional[builtins.int] = ...,
        dependency_status: typing.Optional[
            global___Cell.DependencyStatus.ValueType
        ] = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_dependency_status",
            b"_dependency_status",
            "_last_executed",
            b"_last_executed",
            "_output",
            b"_output",
            "dependency_status",
            b"dependency_status",
            "last_executed",
            b"last_executed",
            "output",
            b"output",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_dependency_status",
            b"_dependency_status",
            "_last_executed",
            b"_last_executed",
            "_output",
            b"_output",
            "code",
            b"code",
            "dependency_status",
            b"dependency_status",
            "in_ports",
            b"in_ports",
            "last_executed",
            b"last_executed",
            "out_ports",
            b"out_ports",
            "output",
            b"output",
            "uid",
            b"uid",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "_dependency_status", b"_dependency_status"
        ],
    ) -> typing.Optional[typing_extensions.Literal["dependency_status"]]: ...
    @typing.overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal["_last_executed", b"_last_executed"],
    ) -> typing.Optional[typing_extensions.Literal["last_executed"]]: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_output", b"_output"]
    ) -> typing.Optional[typing_extensions.Literal["output"]]: ...

global___Cell = Cell

class Graph(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ROOT_FIELD_NUMBER: builtins.int
    CELLS_FIELD_NUMBER: builtins.int
    CONNECTIONS_FIELD_NUMBER: builtins.int
    SELECTED_CELL_FIELD_NUMBER: builtins.int
    @property
    def root(self) -> global___Cell: ...
    @property
    def cells(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Cell
    ]: ...
    @property
    def connections(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Connection
    ]: ...
    selected_cell: typing.Text
    def __init__(
        self,
        *,
        root: typing.Optional[global___Cell] = ...,
        cells: typing.Optional[typing.Iterable[global___Cell]] = ...,
        connections: typing.Optional[typing.Iterable[global___Connection]] = ...,
        selected_cell: typing.Optional[typing.Text] = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_selected_cell",
            b"_selected_cell",
            "root",
            b"root",
            "selected_cell",
            b"selected_cell",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_selected_cell",
            b"_selected_cell",
            "cells",
            b"cells",
            "connections",
            b"connections",
            "root",
            b"root",
            "selected_cell",
            b"selected_cell",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal["_selected_cell", b"_selected_cell"],
    ) -> typing.Optional[typing_extensions.Literal["selected_cell"]]: ...

global___Graph = Graph
